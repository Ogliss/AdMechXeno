using System;
using System.Collections.Generic;
using RimWorld;
using Verse;
using Verse.AI;

namespace AdeptusMechanicus
{
    [StaticConstructorOnStartup]
    public class OGNecronModification
    {
        static OGNecronModification()
        {

            DefDatabase<ThingDef>.AllDefsListForReading.ForEach(action: td =>
            {
                if (td.defName.StartsWith("Corpse_Necron_") && !td.defName.Contains("ScarabSwarm") && td.IsCorpse)
                {
                    td.comps.Add(new CompProperties_NecronOG()
                    {
                        //     chance = 0.25f
                    });
                    td.tickerType = TickerType.Normal;
                }
            });
        }
    }

    // Token: 0x0200024E RID: 590
    public class CompProperties_NecronOG : CompProperties
    {
        // Token: 0x06000AB1 RID: 2737 RVA: 0x0005598C File Offset: 0x00053D8C
        public CompProperties_NecronOG()
        {
            this.compClass = typeof(Comp_NecronOG);
        }

        // Token: 0x040004AB RID: 1195
        public float overlightRadius;

        // Token: 0x040004AC RID: 1196
        public float glowRadius = 14f;

        // Token: 0x040004AD RID: 1197
        public ColorInt glowColor = new ColorInt(255, 255, 255, 0) * 1.45f;
        public DamageDef fatalDamageDef;
        public DamageInfo fatalDinfo;
        public float chance;
        public bool reviveFlag = true;
        public bool repairFlag = false;
    }
    // Token: 0x02000C66 RID: 3174
    public class Comp_NecronOG : ThingComp
    {
        // Token: 0x17000AD2 RID: 2770
        // (get) Token: 0x060045EE RID: 17902 RVA: 0x0020D7F1 File Offset: 0x0020BBF1
        public CompProperties_NecronOG Props
        {
            get
            {
                return (CompProperties_NecronOG)this.props;
            }
        }

        //   public DamageInfo fatalDinfo;
        public DamageInfo FatalDinfo
        {
            get
            {
                if (base.parent is Corpse pawnCorpse)
                {
                    if (logging == true) Log.Message(string.Format("FatalDinfo loading from pawn comp props"));
                    DamageInfo info = (DamageInfo)pawnCorpse.InnerPawn.GetComp<Comp_NecronOG>().Props.fatalDinfo;
                    if (logging == true) Log.Message(string.Format("FatalDinfo loaded from {0}'s comp", pawnCorpse.InnerPawn.Label));
                    if (logging == true) Log.Message(string.Format("FatalDinfo DamageInfo; {0}", info));
                    if (logging == true) Log.Message(string.Format("FatalDinfo ArmorPenetration {0}", info.ArmorPenetrationInt));
                    if (logging == true) Log.Message(string.Format("FatalDinfo DamageAmount {0}", info.Amount));
                    return info;
                }
                else
                {
                    if (logging == true) Log.Message(string.Format("FatalDinfo loaded from comp props"));
                    return (DamageInfo)this.Props.fatalDinfo;
                }
            }
        }

        public DamageInfo dinfo;
        public DamageInfo dInfo;
        public DamageDef damageDef;

        public DamageDef fatalDamageDef = null;
        public bool reviveFlag = true;
        public Pawn pawn;
        public Corpse pawnCorpse = null;
        public bool reviveTried = false;
        public List<Hediff> HDlist = null;
        public Hediff youngestH;
        public bool youngestHHeal;
        public bool hasrun = false;
        bool downed;
        bool logging = false;

        public override void PostSpawnSetup(bool respawningAfterLoad)
        {
            base.PostSpawnSetup(respawningAfterLoad);
        }

        public void Downed()
        {
            if (logging == true) Log.Message(string.Format("downed start"));
            if (base.parent != null && base.parent is Pawn pawn)
            {
                if (logging == true) Log.Message(string.Format("downed 1 {0} : {1}", pawn.Label, pawn.Downed));
                GetHediffs(pawn, out HDlist, out youngestH);
                if (logging == true) Log.Message(string.Format("downed 2 1 {0} : {1}", pawn.Label, pawn.Downed));
                //Log.Message(string.Format("downed 2 2 {0} pawn.equipment.Primary.Spawned: {1}", pawn.Label, pawn.equipment.Primary.Spawned));
                if (pawn.Downed)
                {
                    downed = true;
                }
                if (logging == true) Log.Message(string.Format("downed 5 {0} : {1}", pawn.Label, pawn.Downed));
                if (HDlist != null && HDlist.Count > 0)
                {
                    if (logging == true) Log.Message(string.Format("downed 6 {0} : {1}", pawn.Label, pawn.Downed));
                    HealRandom(pawn, HDlist);
                    if (logging == true) Log.Message(string.Format("downed 7 {0} : {1}", pawn.Label, pawn.Downed));
                }
                if (logging == true) Log.Message(string.Format("downed 8 {0} : {1}", pawn.Label, pawn.Downed));
                if (downed && !pawn.Downed)
                {
                    ThingDef thingDef = ThingDef.Named(pawn.kindDef.weaponTags[0]);
                    ThingWithComps thing = (ThingWithComps)GenClosest.ClosestThingReachable(pawn.Position, pawn.Map, ThingRequest.ForDef(thingDef), PathEndMode.InteractionCell, TraverseParms.For(pawn, Danger.Deadly, TraverseMode.ByPawn, false));
                    if (thing != null)
                    {
                        thing.DeSpawn();
                        pawn.equipment.AddEquipment(thing);
                    }
                }
                if (logging == true) Log.Message(string.Format("downed end"));
            }
        }

        public void Dead(Pawn pawn)
        {
            if (pawn != null)
            {
                if (logging == true) Log.Message(string.Format("Dead 1 {0} Dead: {1}", pawn.Label, pawn.Dead));
                GetHediffs(pawn, out HDlist, out youngestH);
                if (logging == true) Log.Message(string.Format("Dead 2 {0} youngestH: {1}", pawn.Label, pawn.Dead));
                if (youngestH != null)
                {
                    if (logging == true) Log.Message(string.Format("Dead 2 {0} youngestH: {1}", pawn.Label, youngestH.Label));
                    CheckHediff(youngestH, out bool healable);
                    if (logging == true) Log.Message(string.Format("Dead 3 {0} youngestH: {1}", healable, youngestH.Label));
                    if (logging == true) Log.Message(string.Format("Dead 4 reviveTried {0}", reviveTried));
                    if (logging == true) Log.Message(string.Format("Dead 5 reviveFlag {0}", reviveFlag));
                    if (healable && !reviveTried && reviveFlag)
                    {
                        TryRevive(pawn);
                    }
                }
                else if (youngestH == null) Log.Message(string.Format("youngestH==null"));
            }
            else if (pawn == null) Log.Message(string.Format("pawn==null"));
        }

        public void GetHediffs(Pawn pawn, out List<Hediff> HDlist, out Hediff youngestH)
        {
            HDlist = new List<Hediff>();
            youngestH = null;
            youngestHHeal = false;
            List<Hediff> list = pawn.health.hediffSet.hediffs;

            if (logging == true) Log.Message(string.Format("GetHediffs 1 there are {0} to check", list.Count));
            foreach (var hd in list)
            {
                if (logging == true) Log.Message(string.Format("GetHediffs 0 {0} on: {1}", hd.Label, hd.Part.Label));
                bool isMissing = pawn.health.hediffSet.PartIsMissing(hd.Part);
                if (logging == true) Log.Message(string.Format("GetHediffs 1 is missing? {0}", isMissing));
                if (isMissing == false)
                {
                    if (logging == true) Log.Message(string.Format("GetHediffs 2 {0} on: {1} {2}", hd.Label, hd.Part.Label, HDlist));
                    if (!hd.def.defName.Contains("InEyes"))
                    {
                        if (logging == true) Log.Message(string.Format("GetHediffs 3 {0} on: {1} {2}", hd.Label, hd.Part.Label, HDlist));
                        HDlist.Add(hd);
                        if (logging == true) Log.Message(string.Format("GetHediffs 4 {0} on: {1} {2}", hd.Label, hd.Part.Label, hd));
                        if (youngestH == null || youngestH.ageTicks > hd.ageTicks)
                        {
                            if (logging == true) Log.Message(string.Format("GetHediffs 5 hd {0} is: {1} ticks old", hd.Label, hd.ageTicks));
                            youngestH = hd;
                            if (logging == true) Log.Message(string.Format("GetHediffs 6 youngestH {0} is: {1} ticks old", youngestH.Label, youngestH.ageTicks));
                        }
                    }
                }
                if (youngestH != null)
                {
                    if (logging == true) Log.Message(string.Format("GetHediffs 7 youngestH {0} on: {1}", youngestH.Label, youngestH.Part.Label));
                    if (logging == true) Log.Message(string.Format("GetHediffs 7 A"));
                }
                if (logging == true) Log.Message(string.Format("GetHediffs 7 B"));
                //else Log.Message(string.Format("GetHediffs 7 youngestH {0} ", youngestH));
            }
            if (logging == true) Log.Message(string.Format("GetHediffs 7 C"));
            if (logging == true) Log.Message(string.Format("GetHediffs end"));
        }

        public void CheckHediff(Hediff hd, out bool healable)
        {

            if (logging == true) Log.Message(string.Format("CheckHediff 1 {0} on: {1}", hd.Label, hd.Part.Label));
            healable = true;
            if (logging == true) Log.Message(string.Format("CheckHediff 2 {0} : {1}", hd.Label, healable));
            if (hd != null)
            {
                if (logging == true) Log.Message(string.Format("CheckHediff 3 {0} : {1}", hd.Label, healable));
                if (hd.source.IsWeapon)
                {
                    if (logging == true) Log.Message(string.Format("CheckHediff 4 {0} : {1}", hd.Label, healable));
                    if (hd.source.IsMeleeWeapon)
                    {
                        if (logging == true) Log.Message(string.Format("CheckHediff 4 1 {0} : {1}", hd.Label, healable));
                        if (hd.source.weaponTags.Contains("PowerWeapon"))
                        {
                            if (logging == true) Log.Message(string.Format("CheckHediff 4 2 {0} : {1}", hd.Label, healable));
                            //  hd = true;
                            healable = false;
                            if (logging == true) Log.Message(string.Format("CheckHediff 4 3 {0} : {1}", hd.Label, healable));
                        }
                        if (logging == true) Log.Message(string.Format("CheckHediff 4 4 {0} : {1}", hd.Label, healable));
                    }
                    else if (hd.source.IsRangedWeapon)
                    {
                        if (logging == true) Log.Message(string.Format("CheckHediff 5 {0} : {1}", hd.Label, healable));
                        if (base.parent != null)
                        {
                            if (base.parent is Corpse pawnCorpse)
                            {
                                float ava = ((pawnCorpse.InnerPawn.kindDef.race.statBases.GetStatValueFromList(StatDefOf.ArmorRating_Blunt, 0f) + pawnCorpse.InnerPawn.kindDef.race.statBases.GetStatValueFromList(StatDefOf.ArmorRating_Sharp, 0f)) / 2);
                                if (logging == true) Log.Message(string.Format("CheckHediff pawnCorpse 6 {0} : {1}", hd.Label, healable));
                                float hdap = FatalDinfo.ArmorPenetrationInt;
                                if (logging == true) Log.Message(string.Format("CheckHediff pawnCorpse 7 AP {0} Vs {1}", hdap, ava));
                                if (hdap >= ava)
                                {
                                    if (logging == true) Log.Message(string.Format("CheckHediff pawnCorpse 8 {0} : {1}", hd.Label, healable));
                                    healable = false;
                                    if (logging == true) Log.Message(string.Format("CheckHediff pawnCorpse 9 {0} : {1}", hd.Label, healable));
                                }
                                else
                                {
                                    if (logging == true) Log.Message(string.Format("CheckHediff pawnCorpse 8 {0} : {1}", hd.Label, healable));
                                    healable = true;
                                }
                            }
                            else if (base.parent is Pawn pawn)
                            {
                                float ava = ((pawn.kindDef.race.statBases.GetStatValueFromList(StatDefOf.ArmorRating_Blunt, 0f) + pawn.kindDef.race.statBases.GetStatValueFromList(StatDefOf.ArmorRating_Sharp, 0f)) / 2);
                                if (logging == true) Log.Message(string.Format("CheckHediff pawn 6 {0} : {1}", hd.Label, ava));
                                if (logging == true) Log.Message(string.Format("CheckHediff pawn 6 {0} : {1}", hd.Label, hd.source, hd.source.GetType()));
                                ThingDef thing = hd.source.Verbs[0].defaultProjectile;
                                dinfo = new DamageInfo();
                                float hdap = hd.source.Verbs[0].defaultProjectile.projectile.damageDef.defaultArmorPenetration;
                                if (logging == true) Log.Message(string.Format("CheckHediff pawn 7 {0} : {1}", hd.source.Verbs[0].defaultProjectile.projectile.damageDef.label, hdap));
                                if (hdap >= ava)
                                {
                                    if (logging == true) Log.Message(string.Format("CheckHediff pawn 8 {0} : {1}", hd.Label, healable));
                                    healable = false;
                                    if (logging == true) Log.Message(string.Format("CheckHediff pawn 8 {0}", hd.Label));
                                    if (logging == true) Log.Message(string.Format("CheckHediff pawn 9 {0} : {1}", hd.Label, healable));
                                }
                                else
                                {
                                    healable = true;
                                }
                            }
                        }

                    }
                }
            }
        }

        public void HealRandom(Pawn pawn, List<Hediff> HDlist)
        {
            if (HDlist == null)
            {
                GetHediffs(pawn, out HDlist, out youngestH);
                if (HDlist == null || HDlist.Count == 0)
                {
                    return;
                }
            }
            if (HDlist != null)
            {
                Hediff hd = HDlist.RandomElement<Hediff>();
                CheckHediff(hd, out bool healable);
                if (healable)
                {
                    hd.Heal(hd.Severity);
                    HDlist.Remove(hd);
                }
            }
        }

        public void TryRevive(Pawn pawn)
        {
            if (Rand.Chance(0.5f) && reviveTried == false)
            {
                ResurrectionUtility.Resurrect(pawn);
                ThingDef thingDef = ThingDef.Named(pawn.kindDef.weaponTags[0]);
                ThingWithComps thing = (ThingWithComps)GenClosest.ClosestThingReachable(pawn.Position, pawn.Map, ThingRequest.ForDef(thingDef), PathEndMode.InteractionCell, TraverseParms.For(pawn, Danger.Deadly, TraverseMode.ByPawn, false));
                thing.DeSpawn();
                pawn.equipment.AddEquipment(thing);
                MoteMaker.ThrowLightningGlow(base.parent.TrueCenter(), base.parent.Map, 13f);
                MoteMaker.MakeStaticMote(base.parent.TrueCenter(), base.parent.Map, ThingDefOf.Mote_ExplosionFlash, 22f);
            }
            else if (reviveTried == true)
            {
                MoteMaker.ThrowLightningGlow(base.parent.TrueCenter(), base.parent.Map, 13f);
                MoteMaker.MakeStaticMote(base.parent.TrueCenter(), base.parent.Map, ThingDefOf.Mote_ExplosionFlash, 22f);
                pawnCorpse.DeSpawn();
                reviveTried = true;
            }
            else reviveTried = true;
        }

        public override void PostPreApplyDamage(DamageInfo dinfo, out bool absorbed)
        {
            if (base.parent is Pawn && dinfo.Def.defName.Contains("InEyes"))
            {
                absorbed = true;
            }
            else if (base.parent is Pawn pawn && dinfo.ArmorPenetrationInt < ((pawn.kindDef.race.statBases.GetStatValueFromList(StatDefOf.ArmorRating_Blunt, 0f) + pawn.kindDef.race.statBases.GetStatValueFromList(StatDefOf.ArmorRating_Sharp, 0f)) / 2))
            {
                absorbed = Rand.Chance(0.5f) ? true : false;
            }
            else base.PostPreApplyDamage(dinfo, out absorbed);

        }

        public override void PostPostApplyDamage(DamageInfo dinfo, float totalDamageDealt)
        {
            base.PostPostApplyDamage(dinfo, totalDamageDealt);
            if (base.parent is Pawn pawn)
            {
                if (pawn.Dead)
                {
                    Props.fatalDinfo = dinfo;
                    fatalDamageDef = dinfo.Def;
                    if (FatalDinfo.ArmorPenetrationInt >= ((pawn.kindDef.race.statBases.GetStatValueFromList(StatDefOf.ArmorRating_Blunt, 0f) + pawn.kindDef.race.statBases.GetStatValueFromList(StatDefOf.ArmorRating_Sharp, 0f)) / 2))
                    {
                        reviveFlag = false;
                        if (logging == true) Log.Message(string.Format("fatal damage: disable rewvive?{0}", reviveFlag));
                    }
                }
                else
                {
                    dInfo = dinfo;
                    damageDef = dinfo.Def;
                }
            }
        }

        public override void CompTick()
        {
            base.CompTick();
            if (base.parent.IsHashIntervalTick(300) && base.parent != null)
            {
                if (base.parent is Pawn pawn && pawn.kindDef != OGNecronDefOf.NecronScarabSwarm)
                {
                    if (pawn.Dead)
                    {
                        Dead(pawn);
                    }
                    else if (pawn.Downed)
                    {
                        Downed();
                    }
                    else
                    {
                        if (pawn.health.hediffSet.hediffs.Any(opt => opt.pawn.health.hediffSet.PartIsMissing(opt.Part) != true))
                        {
                            GetHediffs(pawn, out HDlist, out youngestH);
                            if (HDlist != null || HDlist.Count != 0)
                            {
                                HealRandom(pawn, HDlist);
                            }
                        }
                    }
                }
                if (base.parent is Corpse pawnCorpse && pawnCorpse.InnerPawn.kindDef != OGNecronDefOf.NecronScarabSwarm)
                {
                    pawn = pawnCorpse.InnerPawn;

                    Dead(pawn);
                }

            }
        }
    }
}